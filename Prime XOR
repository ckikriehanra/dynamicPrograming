#include <bits/stdc++.h>
#define low 3500
#define hight 4500
#define max_value 8192 
#define MOD 1000000007
//2^13-1
using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

//step 1: find all prime in range[0; max_value]
vector<bool> isPrime(max_value+1, true);
vector<int> P;
void findPrime()
{
    isPrime[0] = isPrime[1] = false;
    for(int i = 2; i*i <= max_value; i++)
    {
        for(int j = i; j*i <= max_value; j++)
            isPrime[i*j] = false;
    }
    for(int i = 0; i <= max_value; i++)
        if(isPrime[i])
        {
            P.push_back(i);
        }
}
//step 2: fill to dp[i][j]:
//no_subsets within [low, hight] , which has XOR is result is j (j >= 0 && j <= 2^13-1)
int primeXor(vector<int> a)
{
    long long ans = 0;
    int dist = hight-low;
    vector<vector<long long>> dp(dist+1, vector<long long>(max_value+1, 0));
    vector<int> counts(dist+1, 0);
    //find no each element in a
    for(int i = 0; i < a.size(); i++)
    {
        counts[a[i]-low]++;
    }
    
    dp[0][0] = (counts[0]+2)/2;
    dp[0][0^low] = (counts[0]+1)/2;
    //fill to dp, dp[i][j] consists two disjoint paths:
    //first, dp[i-1][j] is no_subsets in which i+low not effect to XOR result
    //second, dp[i-1][j^(i+low)] is no_subsets in which i+low effect to XOR result
    for(int i = 1; i <= dist; i++)
    {
        for(int j = 0; j <= max_value; j++)
        {
            //(counts[i]+2)/2 : no_i in a (even)
            //(counts[i]+1)/2 : no_i in a (odd)
            dp[i][j] = (dp[i-1][j]*((counts[i]+2)/2)%MOD + dp[i-1][j^(i+low)]*((counts[i]+1)/2)%MOD) % MOD;
        }
    }
    for(int p : P)
    {
        ans = (ans + dp[dist][p])%MOD;
    }
    return ans%MOD;
}

int main()
{
    
    findPrime();
    ofstream fout(getenv("OUTPUT_PATH"));

    string q_temp;
    getline(cin, q_temp);

    int q = stoi(ltrim(rtrim(q_temp)));
    
    for (int q_itr = 0; q_itr < q; q_itr++) {
        string n_temp;
        getline(cin, n_temp);

        int n = stoi(ltrim(rtrim(n_temp)));

        string a_temp_temp;
        getline(cin, a_temp_temp);

        vector<string> a_temp = split(rtrim(a_temp_temp));

        vector<int> a(n);

        for (int i = 0; i < n; i++) {
            int a_item = stoi(a_temp[i]);

            a[i] = a_item;
        }

        int result = primeXor(a);

        fout << result << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
